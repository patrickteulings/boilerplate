{"version":3,"sources":["webpack:///./src/scss/src/scss/style.scss","webpack:///./src/scss/src/scss/core/config/_colors.scss","webpack:///./src/scss/src/scss/core/mixins/_mixins.scss","webpack:///./src/scss/src/scss/core/config/_fonts.scss","webpack:///./src/scss/src/scss/core/ui/_buttons.scss","webpack:///./src/scss/src/scss/core/mixins/_transitions.scss","webpack:///./src/scss/src/scss/core/ui/_forms.scss","webpack:///./src/scss/src/scss/core/config/_layout.scss"],"names":[],"mappings":"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","file":"style.css","sourcesContent":["\nbody, html {\n  font-size: 16px;\n}\n\n@import\n  'core/config/colors',\n  'core/functions/functions',\n  'core/mixins/mixins',\n  'core/config/fonts',\n  'core/config/layout',\n  'core/mixins/transitions';\n\n\n@import\n  'core/ui/buttons',\n  'core/ui/forms';\n\n\n// Test styles\n.flexwrap {\n  @include flex();\n  @include flex-wrap(wrap);\n}\n\n.column--description {\n  @include flex-child(0);\n  @include innerspace(1rem);\n}\n\n.column--content {\n  @include flex-child(1);\n  @include innerspace(1rem);\n}\n\n.testPat {\n  @include fontcombi(text-secondary);\n  @include innerspace(10px, 10px);\n}\n\n.testBase {\n  @include fontcombi();\n}\n\n.testCombi {\n  @include font-size(20px);\n  @include themecombi('warning');\n}\n\n .text--small {\n   @include fontcombi(small);\n }\n\n .text--medium {\n  @include fontcombi(medium);\n}\n\n.text--big {\n  @include fontcombi(large);\n}\n\n.fontttest {\n  @include font-size(33px);\n}\n\n.colortest {\n  color: colorcombi(warning);\n}\n\n.bgcolortest {\n  background: colorcombi('warning', background);\n}\n","/* ----------------------------------------\n  Our primary colors for this project\n---------------------------------------- */\n\n$primary-colors: (\n  base: #00ff00,\n  primary: #50873C,\n  secondary: #383F51,\n  warning: rgb(255, 255, 0)\n);\n\n\n/* ----------------------------------------\n  Combinations for loop for theming\n  Beware, name must also be declared in $themes\n\n  Usage: color: colorcombi(warning) or\n  Usage: color: colorcombi(warning, background)\n---------------------------------------- */\n\n$color-combinations: (\n  primary: (\n    background:map-get($primary-colors, 'primary'),\n    color: #ffffff\n  ),\n  secondary: (\n    background: map-get($primary-colors, 'secondary'),\n    color: #ffffff\n  ),\n  warning: (\n    background: map-get($primary-colors, 'warning'),\n    color: white\n  )\n);\n\n$sections:(\n  'base': (\n    'background':         #cc3120,\n    'color':              #ffffff\n    ),\n    'red-section': (\n        'background':         #cc3120,\n        'color':              #ffffff\n    ),\n    'green-section':(\n        'background':         #3fcc41,\n        'color':              #ffffff\n    )\n);","$basefontsize: 18px;\n\n/* ----------------------------------------\n  Adds a predefined set of (color)\n  charactaristics to yourn element.\n  The sets are defined in _config.scss\n\n  Usage: @include themecombi(name)\n---------------------------------------- */\n\n@mixin themecombi($name) {\n  $selected: map-get($color-combinations, $name);\n\n  @each $key, $value in $selected {\n    #{$key}: $value;\n  }\n};\n\n/* ----------------------------------------\n  Add a prediefined set of font values\n  to your class. You can find the map\n  in _config.scss\n\n  Usage: @include fontcombi(combiname)\n---------------------------------------- */\n\n\n@mixin fontcombi($type:base){\n  $selected: map-get($fontcombinations, $type);\n\n  @each $key, $value in $selected {\n    #{$key}: $value;\n  }\n};\n\n/* ----------------------------------------\n  Font size, recalculates your font-pixel\n  sizes to EM\n---------------------------------------- */\n\n@mixin font-size($px) {\n  font-size: $px;\n  font-size: #{$px / $basefontsize}em;\n}\n\n/* ----------------------------------------\n  Font size, recalculates your font-pixel\n  sizes to EM\n---------------------------------------- */\n\n@mixin line-height($px) {\n  line-height: $px;\n  line-height: #{$px / $basefontsize}em;\n}\n\n/* ----------------------------------------\n  Adds a padding to your element. You have\n  free choice of units. In my personal\n  experience, px or % are recommended\n\n  Usage: @include innerspace(10px) or\n  Usage: @include innerspace(10rem, 5rem)\n---------------------------------------- */\n\n@mixin innerspace($horizontal:0, $vertical:0) {\n  @if $vertical != 0 {\n    padding: $horizontal $vertical;\n  }\n  @else {\n    padding: $horizontal;\n  }\n}\n\n\n\n/* ----------------------------------------\n  Simply defines width and/or height\n  When ony one parameter is given\n  width and height are equal;\n\n  Usage: @include size(20px);\n---------------------------------------- */\n\n@mixin size($width:auto, $height:auto) {\n  @if $height != auto {\n    width: $width;\n    height: $height;\n  }\n  @else {\n    width: $width;\n    height: $width;\n  }\n}\n\n/* ----------------------------------------\n  Prerenders sections based on global\n  color combinations\n---------------------------------------- */\n\n@each $key, $val in $color-combinations {\n  @if map-has-key($color-combinations, $key) {\n      .#{$key} {\n          background-color: colorcombi($key, background);\n          color: colorcombi($key, color);\n      }\n  }\n}","\n\n$primary-font-face: 'Josefin Sans', sans-serif;\n\n%headings {\n  font-family: $primary-font-face;\n  font-weight: 100;\n  margin-top: 0;\n  margin-bottom: 0.5em;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  @extend %headings;\n}\n\nh1 {\n  @include font-size(56px);\n}\n\nh2 {\n  @include font-size(48px);\n}\n\nh3 {\n  @include font-size(36px);\n}\n\nh4 {\n  @include font-size(24px);\n}\n\nh5 {\n  @include font-size(18px);\n}\n\nh6 {\n  @include font-size(16px);\n}\n\n\n$textsize: (\n  small: 8px,\n  medium: 28px,\n  large: 56px\n);\n\n$fonts: (\n  'caption': caption,\n  'heading': heading,\n);\n\n\n\n\n/* ----------------------------------------\n  Used for pre-defining often used font\n  styling such as captions, quotes etc\n\n  See _mixins.scss for usage\n  Usage: @include fontcombi(name);\n---------------------------------------- */\n\n$fontcombinations: (\n  'base': (\n    'background': #999999,\n    'cursor': pointer\n  ),\n  'small': (\n    'font-size': map-get($textsize, 'small')\n  ),\n  'medium': (\n    'font-size': map-get($textsize, 'medium')\n  ),\n  'large': (\n    'font-size': map-get($textsize, 'large')\n  ),\n  'text-secondary': (\n    'background': #ff9900\n  ),\n  'caption': (\n    'background': rgb(184, 184, 184),\n    'font-size': map-get($textsize, 'small')\n  )\n);","/* ----------------------------------------\n  Default button properties\n---------------------------------------- */\n\n%btn {\n  border-radius: 2px;\n  display: inline-block;\n  cursor: pointer;\n  @include innerspace(10px, 10px);\n  @include transition();\n}\n\n/* ----------------------------------------\n  Adjustment for outlined buttons to\n  achieve same height as a regular button\n---------------------------------------- */\n\n%btn-outlined {\n  @extend %btn;\n  @include innerspace(calc(10px - 1px), calc(10px - 1px));\n}\n\n/* ----------------------------------------\n  Plain solid button\n---------------------------------------- */\n\n.btn {\n  @each $key, $value in $primary-colors {\n    @if map-has-key($color-combinations, $key) {\n      &-solid--#{$key}{\n        @extend %btn;\n        $btnColor: colorcombi($key, background);\n        background: colorcombi($key, background);\n        color: colorcombi($key, color);\n        cursor: colorcombi($key, cursor);\n        &:hover{\n          background: lighten($btnColor,10%);\n        }\n      }\n    } @else {\n      @warn \"The key ´#{$key} isn’t defined in the map $color-combinations´\"\n    }\n  }\n};\n\n\n/* ----------------------------------------\n  Outlined button\n---------------------------------------- */\n\n.btn {\n  @each $key, $value in $primary-colors {\n    @if map-has-key($color-combinations, $key) {\n      &-ghosted{\n        opacity: 0.2;\n        cursor: default;\n        pointer-events: none;\n        &:hover{\n        }\n      }\n    } @else {\n      @warn \"The key ´#{$key} isn’t defined in the map $color-combinations´\"\n    }\n  }\n};\n\n/* ----------------------------------------\n  Ghosted and inactive button\n---------------------------------------- */\n\n.btn {\n  @each $key, $value in $primary-colors {\n    @if map-has-key($color-combinations, $key) {\n      &-outlined--#{$key}{\n        @extend %btn-outlined;\n        border: 1px solid colorcombi($key, background);\n        color: colorcombi($key, background);\n        cursor: colorcombi($key, cursor);\n        &:hover{\n          background: colorcombi($key, background);\n          color: colorcombi($key, color);\n        }\n      }\n    } @else {\n      @warn \"The key ´#{$key} isn’t defined in the map $color-combinations´\"\n    }\n  }\n};\n\n\n\n\n\n","$default-easing: cubic-bezier(0.000, 0.325, 0.375, 0.915);\n\n@mixin transition($attr:all, $time:0.2s, $easing:$default-easing) {\n  transition: all 0.2s ease-out;\n}","\ninput[type=\"text\"] {\n  border: 1px solid color('primary');\n  border-radius: 2px;\n  width: 100%;\n  @include innerspace(1rem);\n  @include font-size(16px);\n  padding-right: 40px;\n\n  &:focus {\n    outline-color: lighten(color('primary'),50%);\n  }\n}\n\n.input-text--wrap{\n  position: relative;\n\n  .btn--reset-search {\n    display: none;\n    position: absolute;\n    top: 50%;\n    right: 15px;\n    transform: translateY(-50%);\n    @include size(21px);\n    border-radius: 50%;\n    background: color('primary');\n    cursor: pointer;\n\n    &.is-active{\n      display: block;\n    }\n\n    .close-cross{\n      &::before, &::after {\n        content: '';\n        position: absolute;\n        top: 50%;\n        left: 20%;\n        height: 1px;\n        width: 60%;\n        margin-top: -1px;\n        background: #ffffff;\n      }\n      &::before {\n        transform: rotate(45deg);\n      }\n      &::after {\n        transform: rotate(-45deg);\n      }\n    }\n  }\n}","\n\n@mixin flex($direction: row, $justify: space-between) {\n  display: flex;\n  flex-direction: $direction;\n  justify-content: $justify;\n}\n\n@mixin flex-wrap($wrap:no-wrap) {\n  flex-wrap: $wrap;\n}\n\n@mixin flex-child($grow: 0, $width: auto) {\n  flex: $grow 1 auto;\n  width: $width;\n}"],"sourceRoot":""}